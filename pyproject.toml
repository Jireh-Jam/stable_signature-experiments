[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "watermarking-methods"
version = "1.0.0"
description = "A comprehensive toolkit for testing digital watermark robustness"
authors = [{name = "Watermarking Research Team", email = "research@watermarking.ai"}]
license = {text = "CC-BY-NC"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["watermarking", "image-processing", "robustness-testing", "digital-watermarks"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Security",
]
dependencies = [
    "torch>=1.12.0",
    "torchvision>=0.13.0",
    "Pillow>=8.0.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "scikit-image>=0.19.0",
    "scipy>=1.7.0",
    "omegaconf>=2.1.0",
    "einops>=0.3.0",
    "transformers>=4.19.0",
    "torchmetrics>=0.6.0",
    "augly>=1.0.0",
    "pytorch-fid>=0.3.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]
notebooks = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "ipywidgets>=8.0.0",
    "seaborn>=0.11.0",
]
azure = [
    "azure-storage-blob>=12.0.0",
    "azure-identity>=1.12.0",
]

[project.urls]
Homepage = "https://github.com/watermarking-research/watermarking-methods"
Documentation = "https://watermarking-methods.readthedocs.io"
Repository = "https://github.com/watermarking-research/watermarking-methods"
Issues = "https://github.com/watermarking-research/watermarking-methods/issues"

[project.scripts]
watermark-test = "watermarking_methods.cli:main"
stable-signature = "watermarking_methods.stable_signature.cli:main"
watermark-anything = "watermarking_methods.watermark_anything.cli:main"

[tool.setuptools.packages.find]
include = ["watermarking_methods*"]
exclude = ["tests*", "docs*", "experiments*"]

[tool.setuptools.package-data]
"watermarking_methods" = ["**/*.yaml", "**/*.json", "**/*.txt"]

# === DEVELOPMENT TOOLS CONFIGURATION ===

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (let developers decide)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "src/ldm",  # external dependency
    "src/taming", # external dependency
    "hidden",   # external dependency
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"setup.py" = ["E402"]     # Allow imports after code in setup.py

[tool.ruff.isort]
known-first-party = ["watermarking_methods"]
force-single-line = false
lines-after-imports = 2

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | src/ldm
  | src/taming
  | hidden
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "src/ldm/.*",
    "src/taming/.*", 
    "hidden/.*",
    "build/.*",
    "dist/.*",
]

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "PIL.*",
    "numpy.*",
    "scipy.*",
    "matplotlib.*",
    "sklearn.*",
    "augly.*",
    "omegaconf.*",
    "einops.*",
    "transformers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=watermarking_methods",
    "--cov-report=html",
    "--cov-report=term-missing",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["watermarking_methods"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "src/ldm/*",
    "src/taming/*",
    "hidden/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]