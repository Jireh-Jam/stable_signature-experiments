[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "stable_signature_experiments"
version = "1.0.0"
description = "A comprehensive watermarking pipeline for testing Stable Signature and Watermark Anything methods"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Watermarking Research Team", email = "watermarking@example.com"},
]
keywords = ["watermarking", "stable signature", "watermark anything", "image processing", "deep learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Image Processing",
]

dependencies = [
    "torch>=1.13.0",
    "torchvision>=0.14.0",
    "numpy>=1.21.0",
    "pillow>=9.0.0",
    "scikit-image>=0.19.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "tqdm>=4.62.0",
    "omegaconf>=2.1.0",
    "opencv-python>=4.5.0",
    "PyYAML>=6.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=3.0",
    "black>=22.0",
    "ruff>=0.1.0",
    "mypy>=0.990",
    "pre-commit>=2.20",
]

[project.urls]
"Homepage" = "https://github.com/watermarking-research/stable-signature-experiments"
"Bug Reports" = "https://github.com/watermarking-research/stable-signature-experiments/issues"
"Source" = "https://github.com/watermarking-research/stable-signature-experiments"

[project.scripts]
stable-signature = "stable_signature_experiments.watermarking_methods.stable_signature.cli:main"
watermark-anything = "stable_signature_experiments.watermarking_methods.watermark_anything.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["stable_signature_experiments*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
stable_signature_experiments = ["*.yaml", "*.json", "*.txt"]

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 120
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused

[tool.ruff.isort]
known-third-party = ["torch", "torchvision", "numpy", "PIL", "cv2", "sklearn", "pandas", "matplotlib"]

# Black configuration
[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "torch.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "torchvision.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "PIL.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "cv2.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "sklearn.*"
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"