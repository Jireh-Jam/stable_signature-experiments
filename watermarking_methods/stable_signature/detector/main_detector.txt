import os
import watermark_detector
import torch
from torchvision import transforms
from watermark_detector import str2msg

# Define image transforms (using ImageNet normalization)
NORMALIZE_IMAGENET = transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                          std=[0.229, 0.224, 0.225])
UNNORMALIZE_IMAGENET = transforms.Normalize(mean=[-0.485 / 0.229, -0.456 / 0.224, -0.406 / 0.225],
                                            std=[1 / 0.229, 1 / 0.224, 1 / 0.225])
default_transform = transforms.Compose([
    transforms.ToTensor(),
    NORMALIZE_IMAGENET
])

# Set device (GPU or CPU)
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Define the folder path where your watermarked images are stored
watermark_images_folder = "../../generated_images/"
checkpoint_path = "../ckpts/hidden_replicate.pth"

# Example message used during watermark encoding (you should use the same message for comparison)
msg_ori = torch.Tensor(str2msg("111010110101000001010111010011010100010000100111")).unsqueeze(0).to(device)

params = watermark_detector.Params(
    encoder_depth=4,
    encoder_channels=64,
    decoder_depth=8,
    decoder_channels=64,
    num_bits=48,
    attenuation="jnd",  # or some other attenuation method you are using
    scale_channels=False,
    scaling_i=1.0,
    scaling_w=1.5
)

# Define the image transformation
transform = transforms.Compose([
    transforms.ToTensor(),
    NORMALIZE_IMAGENET
])


def create_dir(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)


# Create a directory to store the watermark detection metrics
create_dir("detection_metrics")

# Define the output CSV file path
output_csv = "detection_metrics/watermark_detection_metrics.csv" # Output CSV file path
#
# Detect watermarks in the folder and store metrics in CSV
watermark_detector.process_images_in_folder(watermark_images_folder, checkpoint_path, output_csv)
