[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "adversarial-ml-tooling"
version = "1.0.0"
description = "Comprehensive suite for watermark attacks and detection with advanced ML techniques"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Adversarial ML Research Team"},
]
keywords = ["watermarking", "adversarial-attacks", "computer-vision", "deep-learning", "robustness"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
    "Topic :: Multimedia :: Graphics",
]
requires-python = ">=3.9"

# Core dependencies
dependencies = [
    "torch>=1.12.0",
    "torchvision>=0.13.0",
    "pillow>=9.0.0",
    "numpy>=1.21.0",
    "scipy>=1.8.0",
    "scikit-image>=0.19.0",
    "opencv-python>=4.5.0",
    "matplotlib>=3.5.0",
    "pandas>=1.4.0",
    "pyyaml>=6.0",
    "tqdm>=4.62.0",
    "pathlib2>=2.3.0; python_version<'3.10'",
]

[project.optional-dependencies]
# Diffusion model dependencies
diffusion = [
    "diffusers>=0.21.0",
    "transformers>=4.21.0",
    "accelerate>=0.20.0",
    "safetensors>=0.3.0",
]

# Advanced attack dependencies
advanced = [
    "foolbox>=3.3.0",
    "bm3d>=4.0.0",
    "compressai>=1.2.0",
    "augly>=1.0.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]

# Documentation dependencies
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

# All optional dependencies
all = [
    "adversarial-ml-tooling[diffusion,advanced,dev,docs]"
]

[project.urls]
Homepage = "https://github.com/your-org/adversarial-ml-tooling"
Repository = "https://github.com/your-org/adversarial-ml-tooling"
Documentation = "https://adversarial-ml-tooling.readthedocs.io"
"Bug Tracker" = "https://github.com/your-org/adversarial-ml-tooling/issues"

[project.scripts]
watermark-attack = "advanced_attacks.run:main"
watermark-detect = "detector.run:main"
generate-watermarks = "generate_watermarked_images:main"

[tool.setuptools.packages.find]
include = ["advanced_attacks*", "detector*", "common*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "skimage.*",
    "scipy.*",
    "matplotlib.*",
    "augly.*",
    "foolbox.*",
    "bm3d.*",
    "compressai.*",
    "diffusers.*",
    "transformers.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=advanced_attacks",
    "--cov=detector", 
    "--cov=common",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "diffusion: marks tests that require diffusion models",
]

# Coverage configuration
[tool.coverage.run]
source = ["advanced_attacks", "detector", "common"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]